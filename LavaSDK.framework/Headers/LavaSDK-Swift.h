// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
@import XMPPFramework;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@protocol LavaRegionManagerDelegate;
@class LavaTracker;
@class LavaMessenger;
@class NSData;
@class LavaUser;
@class LavaChatUser;
@class NSError;
@class UIViewController;
@class LavaUserProfile;
@class UIImage;
@class LavaServer;


/// The Lava class. All Lava APIs are available in this class.
SWIFT_CLASS("_TtC7LavaSDK4Lava")
@interface Lava : NSObject
+ (void)initialize:(NSString * _Nonnull)apiKey launchOptions:(NSDictionary * _Nullable)launchOptions;

/// The API key.
@property (nonatomic, readonly, copy) NSString * _Nonnull apiKey;

/// Set this to true to enable debug logging. By default set to false.
+ (BOOL)debuggingEnabled;
+ (void)setDebuggingEnabled:(BOOL)value;

/// Set this to get callabcks of beacon and ciecular region enter/exit/range callbacks.
+ (id <LavaRegionManagerDelegate> _Nullable)beaconDelegate;
+ (void)setBeaconDelegate:(id <LavaRegionManagerDelegate> _Nullable)newValue;

/// Tracker provides set of APIs for tracking screen and events.
+ (LavaTracker * _Nonnull)tracker;

/// Messenger provides set of APIs for social chat.
+ (LavaMessenger * _Nonnull)messenger;

/// Set the device token information. Used for sending remote notification regarding offers.
+ (void)setDeviceTokenFromData:(NSData * _Nonnull)tokenData;
+ (NSString * _Nonnull)apiVersion;

/// Returns Login status of the user.
///
/// \returns  <code>true
/// </code> if user is logged in.
+ (BOOL)isLoggedIn;

/// Currently logged in user.
///
/// \returns  Currently logged in user. <code>nil
/// </code> if user is not logged in.
+ (LavaUser * _Nullable)currentUser;

/// An array of users.
+ (NSArray<LavaChatUser *> * _Nonnull)userList;

/// The total count of users.
+ (NSInteger)totalCount;

/// State if the users are being downloaded at the moment.
+ (BOOL)isDownloadingUsers;

/// Request to sign up the user with Email.
///
/// \param email The email of the user.
///
/// \param password The password of the user.
///
/// \param completion The block to execute after the signup success or failure.
+ (void)signUpWithEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to sign up the user with Phone Number.
///
/// \param phoneNumber The Phone number of the user.
///
/// \param password The password of the user.
///
/// \param completion The block to execute after the signup success or failure.
+ (void)signUpWithPhoneNumber:(NSString * _Nonnull)phoneNumber password:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to verify the user phone number using the verification key.
///
/// \param phoneNumber The Phone number of the user.
///
/// \param verficationKey The verification key or one time password that is sent to user phone number.
///
/// \param completion The block to execute after the verification success or failure.
+ (void)verifyPhoneNumber:(NSString * _Nonnull)phoneNumber verficationKey:(NSString * _Nonnull)verficationKey completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to resend verification key to user phone number.
///
/// \param phoneNumber The phone number of the user.
///
/// \param completion The block to execute after the request success or failure.
+ (void)resendVerificationForPhoneNumber:(NSString * _Nonnull)phoneNumber completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to resend verification key to user email.
///
/// \param emailAddress The email of the user.
///
/// \param completion The block to execute after the request success or failure.
+ (void)resendVerificationForEmail:(NSString * _Nonnull)emailAddress completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to sign in the user with email.
///
/// \param email The email of the user.
///
/// \param password The password of the user.
///
/// \param completion The block to execute after the sign in success or failure.
+ (void)signInWithEmail:(NSString * _Nonnull)emailAddress password:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(LavaUser * _Nullable, NSError * _Nullable))completion;

/// Request to sign in the user with phone number.
///
/// \param phoneNumber The phone number of the user.
///
/// \param password The password of the user.
///
/// \param completion The block to execute after the sign in success or failure.
+ (void)signInWithPhoneNumber:(NSString * _Nonnull)phoneNumber password:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(LavaUser * _Nullable, NSError * _Nullable))completion;

/// Request to sign in the user with Facebook.
///
/// \param fromViewController The view controller over which Facebook login view controller presented.
///
/// \param completion The block to execute after the sign in success or failure.
+ (void)signInWithFacebookFromViewController:(UIViewController * _Nonnull)fromViewController completion:(void (^ _Nonnull)(LavaUser * _Nullable, NSError * _Nullable))completion;

/// Request to continue with sign in process. This method can be used to continue sign in in current device ignoring the session in other device.
///
/// \param user The current user.
///
/// \param completion The block to execute after the sign in success or failure.
+ (void)continueSignInWithUser:(LavaUser * _Nullable)user completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to retrive the user profile of logged in user.
///
/// \param completion The block to execute after the profile fetch success or failure.
+ (void)getUserProfile:(void (^ _Nonnull)(LavaUser * _Nullable, NSError * _Nullable))completion;

/// Request to update the profile information of logged in user.
///
/// \param userProfile updates user profile of logged in user.
///
/// \param completion The block to execute after the profile update success or failure.
+ (void)updateUserProfile:(LavaUserProfile * _Nonnull)userProfile completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to update the profile picture of logged in user.
///
/// \param user profile picture updates user profile picture of logged in user.
///
/// \param completion The block to execute after the profile picture update success or failure.
+ (void)updateUserProfilePicture:(UIImage * _Nonnull)userProfilePricture completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to upload chat image of logged in user.
///
/// \param user chat picture uploads the chat picture of logged in user.
///
/// \param caht ID the chat id information of the chat image.
///
/// \param metadata metadata for the upload.
///
/// \param completion The block to execute after the profile picture update success or failure.
+ (void)uploadChatPicture:(UIImage * _Nonnull)chatPicture chatId:(NSString * _Nullable)chatId metaData:(NSDictionary<NSString *, NSString *> * _Nullable)metaData completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;

/// Request to add new email to the current account.
///
/// \param email The email to be added.
///
/// \param password The new password for fresh email account.
///
/// \param completion The block to execute after the link account success or failure.
+ (void)linkWithEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(LavaUser * _Nullable, NSError * _Nullable))completion;

/// Request to add new phone number to the current account.
///
/// \param phoneNumber The phone number to be added.
///
/// \param password The new password for fresh phone number account.
///
/// \param completion The block to execute after the link account success or failure.
+ (void)linkWithPhoneNumber:(NSString * _Nonnull)phoneNumber password:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(LavaUser * _Nullable, NSError * _Nullable))completion;

/// Request to link Facebook account with the current account.
///
/// \param currentViewController The view controller over which Facebook login view controller presented.
///
/// \param completion The block to execute after the link account success or failure.
+ (void)linkWithFacebook:(UIViewController * _Nonnull)currentViewController completion:(void (^ _Nonnull)(LavaUser * _Nullable, NSError * _Nullable))completion;

/// Request to link existing email account with the current account.
///
/// \param email The email to be linked.
///
/// \param password The password of the existing email account.
///
/// \param completion The block to execute after the link account success or failure.
+ (void)linkWithExistingEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(LavaUser * _Nullable, NSError * _Nullable))completion;

/// Request to link existing phone number account with the current account.
///
/// \param phoneNumber The phone number to be linked.
///
/// \param password The password of the existing phone number account.
///
/// \param completion The block to execute after the link account success or failure.
+ (void)linkWithExistingPhoneNumber:(NSString * _Nonnull)phoneNumber password:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(LavaUser * _Nullable, NSError * _Nullable))completion;

/// Request to check if account with particular phone number or email exists.
///
/// \param externalId The phone number or email.
///
/// \param completion The block to execute after the check success or failure.
+ (void)checkIfAccountExists:(NSString * _Nonnull)externalId completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to check if email or phone number is verified.
///
/// \param externalId The phone number or email.
///
/// \param completion The block to execute after the check success or failure.
+ (void)checkVerificationStatus:(NSString * _Nonnull)externalId completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to change password of the user.
///
/// \param oldPassword The old password of the user.
///
/// \param newPassword The new password of the user.
///
/// \param completion The block to execute after the password change success or failure.
+ (void)changePassword:(NSString * _Nonnull)oldPassword newPassword:(NSString * _Nonnull)newPassword completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to reset password for email account.
///
/// \param emailAddress The email address of the user.
///
/// \param completion The block to execute after the request success or failure.
+ (void)forgotPasswordForEmail:(NSString * _Nonnull)emailAddress completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to send verification key in order to reset password for phone number account.
///
/// \param phoneNumber The phone number of the user.
///
/// \param completion The block to execute after the request success or failure.
+ (void)forgotPasswordForPhoneNumber:(NSString * _Nonnull)phoneNumber completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to reset password of phone number account using verification key.
///
/// \param verificationKey The one time password (OTP) that is sent to the user phone number.
///
/// \param newPassword The new password for the phone number account.
///
/// \param completion The block to execute after the reset password success or failure.
+ (void)resetPasswordForPhoneNumberWithVerificationKey:(NSString * _Nonnull)verificationKey phoneNumber:(NSString * _Nonnull)phoneNumber newPassword:(NSString * _Nonnull)newPassword completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to log out the user.
///
/// \param completion The block to execute after the log out success or failure.
+ (void)logOut:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to delete the current user account.
///
/// \param completion The block to execute after the account deletion success or failure.
+ (void)deleteCurrentAccount:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request for content.
///
/// \param viewController The view controller that presents the content.
+ (void)requestContent:(UIViewController * _Nonnull)viewController;

/// Handles the push notification received by the application.
///
/// \param userInfo The userInfo received with the notification.
+ (void)handleNotification:(NSDictionary * _Nonnull)userInfo;

/// Request to retrive the user list.
///
/// \param completion The block to execute after the user list fetch success or failure.
+ (void)getUserList:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// This API is only for testing purpose.
+ (NSDictionary<NSString *, NSString *> * _Nonnull)getDebugInfo;

/// This API is only for testing purpose.
+ (void)enterVirtualBeaconRegion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// This API is only for testing purpose.
+ (void)exitVirtualBeaconRegion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// This API is only for testing purpose.
+ (NSArray<LavaServer *> * _Nonnull)getLavaServers;

/// This API is only for testing purpose.
+ (LavaServer * _Nonnull)getCurrentServer;

/// This API is only for testing purpose.
+ (void)setLavaServer:(LavaServer * _Nonnull)server;
@end

@class XMPPStream;
@class GCDAsyncSocket;
@class DDXMLElement;

SWIFT_PROTOCOL("_TtP7LavaSDK16LavaChatDelegate_")
@protocol LavaChatDelegate
@optional
- (void)lavaStream:(XMPPStream * _Nullable)sender socketDidConnect:(GCDAsyncSocket * _Nullable)socket;
- (void)lavaStreamDidConnect;
- (void)lavaStreamConnectionErrorWithConnectionError:(DDXMLElement * _Nonnull)error;
- (void)lavaStreamDidAuthenticate:(XMPPStream * _Nonnull)sender;
- (void)lavaStream:(XMPPStream * _Nonnull)sender didNotAuthenticate:(DDXMLElement * _Nonnull)error;
- (void)lavaStreamDidDisconnect:(XMPPStream * _Nonnull)sender withError:(NSError * _Nonnull)error;
@end



/// The base class used for all Lava SDK model classes. SDK user need not use this class.
SWIFT_CLASS("_TtC7LavaSDK9LavaModel")
@interface LavaModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LavaSDK17LavaChatImageData")
@interface LavaChatImageData : LavaModel
@property (nonatomic, copy) NSString * _Nullable imageUrl;
@property (nonatomic, copy) NSString * _Nullable imageThumbnailUrl;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metaData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LavaChatState) {
  LavaChatStatecomposing = 0,
  LavaChatStatepaused = 1,
};

@class NSCoder;


/// Defines the profile information of the user.
SWIFT_CLASS("_TtC7LavaSDK15LavaUserProfile")
@interface LavaUserProfile : LavaModel <NSCopying, NSCoding>

/// Defines the first name of the user.
@property (nonatomic, copy) NSString * _Nullable firstName;

/// Defines the last name of the user.
@property (nonatomic, copy) NSString * _Nullable lastName;

/// Defines the gender of the user.
@property (nonatomic, copy) NSString * _Nullable gender;

/// Defines the country of the user.
@property (nonatomic, copy) NSString * _Nullable country;

/// Defines the age of the user.
@property (nonatomic) NSInteger age;

/// Defines the email of the user.
@property (nonatomic, copy) NSString * _Nullable email;

/// Defines the tier value of the user.
@property (nonatomic, copy) NSString * _Nonnull tier;

/// Defines the profile picture url of the user.
@property (nonatomic, copy) NSString * _Nullable profilePic;

/// Defines the profile picture thumnail url of the user.
@property (nonatomic, copy) NSString * _Nullable profileThumbnailPic;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;

/// Returns the initials from the user's fist and last name.
- (NSString * _Nonnull)getInitials;

/// Returns the full name of the user.
- (NSString * _Nonnull)getFullName;
@end



/// The chat user profile. All chat recipient list users are this kind of object where jabber id is used to connect to the chat server.
SWIFT_CLASS("_TtC7LavaSDK12LavaChatUser")
@interface LavaChatUser : LavaUserProfile
@property (nonatomic, copy) NSString * _Nonnull jabberId;
@property (nonatomic, readonly, copy) NSString * _Nonnull jabberIdWithoutDomain;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LavaSDK9LavaGroup")
@interface LavaGroup : NSObject
@property (nonatomic, copy) NSString * _Null_unspecified id;
@property (nonatomic, copy) NSString * _Nullable name;
- (NSString * _Nonnull)getName;
- (NSString * _Nonnull)getInitials;
@end

@class NSDate;
@class XMPPMessage;


/// The chat message object.
SWIFT_CLASS("_TtC7LavaSDK11LavaMessage")
@interface LavaMessage : NSObject
@property (nonatomic, copy) NSString * _Nonnull messageId;

/// The body string of the message.
@property (nonatomic, copy) NSString * _Nonnull body;

/// The unique string to identify the sender.
@property (nonatomic, copy) NSString * _Nonnull senderId;

/// The sender display name.
@property (nonatomic, copy) NSString * _Nonnull senderDisplayName;

/// The time at which the message has received.
@property (nonatomic, strong) NSDate * _Nullable date;

/// Returns true if message has media content.
@property (nonatomic) BOOL isMedia;

/// Returns true if message is of type 'action'. An action message can be a message which tells about user subscription or unsucscription from a group.
@property (nonatomic) BOOL isActionMessage;

/// The image data will be non-nil if this is a media message and has image URLs to download.
@property (nonatomic, strong) LavaChatImageData * _Nullable imageData;
@property (nonatomic, readonly) BOOL wasDelayed;
@property (nonatomic, readonly, strong) NSDate * _Nullable delayedDeliveryDate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithXmppMessage:(XMPPMessage * _Nonnull)xmppMessage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSenderId:(NSString * _Nonnull)senderId senderDisplayName:(NSString * _Nonnull)senderDisplayName date:(NSDate * _Nonnull)date body:(NSString * _Nonnull)body OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithItem:(DDXMLElement * _Nonnull)item senderId:(NSString * _Nullable)senderId senderDisplayName:(NSString * _Nullable)senderDisplayName date:(NSDate * _Nullable)date body:(NSString * _Nullable)body OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) LavaChatUser * _Nullable sender;
@end


SWIFT_CLASS("_TtC7LavaSDK22LavaMessageHistoryData")
@interface LavaMessageHistoryData : NSObject
@property (nonatomic, copy) NSArray<LavaMessage *> * _Nonnull messages;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithItem:(DDXMLElement * _Nonnull)item OBJC_DESIGNATED_INITIALIZER;
@end

@protocol LavaMessengerDelegate;


/// Lava Messenger provides set of APIs for social chat.
SWIFT_CLASS("_TtC7LavaSDK13LavaMessenger")
@interface LavaMessenger : NSObject

/// Set this delegate to get callbacks of this messenger class.
@property (nonatomic, weak) id <LavaMessengerDelegate> _Nullable delegate;
- (void)connectUser:(LavaUser * _Nonnull)user;
- (BOOL)isConnected;
- (void)disconnect;
- (BOOL)isConnecting;
- (BOOL)isDisconnected;

/// Request to send message to an user.
///
/// \param message The message that need to be sent.
///
/// \param user The receiver of the message.
///
/// \param completion The block to execute after the message sending.
- (void)sendMessage:(LavaMessage * _Nonnull)message toUser:(LavaChatUser * _Nonnull)user completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to send image to an user.
///
/// \param image The image that need to be sent.
///
/// \param user The receiver of the image message.
///
/// \param completion The block to execute after the message sending.
- (void)sendImage:(UIImage * _Nonnull)image toUser:(LavaChatUser * _Nonnull)user completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;

/// Request to fetch conversation list.
///
/// \param completion The block to execute after the conversation list fetch success or failure.
- (void)getConversationList:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;

/// Check whether the user exists in conversation list.
///
/// \param user The user object.
///
/// \returns  <code>true
/// </code> if user exists in conversation list.
- (BOOL)isUserExistsInConversationList:(LavaChatUser * _Nonnull)user;

/// Add user to the conversation list.
///
/// \param user The user object.
- (void)addUserToConversationList:(LavaChatUser * _Nonnull)user;

/// Check whether the user exists in buddy list.
///
/// \param user The user object.
///
/// \returns  <code>true
/// </code> if user exists in buddy list.
- (BOOL)isUserExistsInRoster:(LavaChatUser * _Nonnull)user;

/// Add user to the buddy list.
///
/// \param user The user object.
///
/// \returns  <code>true
/// </code> if user exists in buddy list.
- (void)addUserToRoster:(LavaChatUser * _Nonnull)user;

/// Request to send 'composing' or 'not composing' message to an user. This is used to show/hide typing indicator when user starts/ends typing.
///
/// \param receiver The receiver of the state change notification.
- (void)setChatState:(enum LavaChatState)chatState receiver:(LavaChatUser * _Nonnull)receiver;

/// Request to create group with a name and participants.
///
/// \param name The name for the group.
///
/// \param participants The list of users who needs to be added to the group.
///
/// \param completion The block to execute after creation of the group with participants.
- (void)createGroup:(NSString * _Nonnull)name participants:(NSArray<LavaChatUser *> * _Nonnull)participants completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;

/// Request to send message to a group.
///
/// \param message The message that needs to be sent.
///
/// \param group The group for which message needs to be sent.
///
/// \param completion The block to execute after message sending success or failure.
- (void)sendMessage:(LavaMessage * _Nonnull)message toGroup:(LavaGroup * _Nonnull)group completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to send image to a group.
///
/// \param image The image that needs to be sent.
///
/// \param group The group for which image needs to be sent.
///
/// \param completion The block to execute after image sending success or failure.
- (void)sendImage:(UIImage * _Nonnull)image toGroup:(LavaGroup * _Nonnull)group completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;

/// Request to retrive all groups.
///
/// \param completion The block to execute after group retrival success or failure.
- (void)getGroups:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;

/// Request to retrive users in a group.
///
/// \param group The group for which users needs to be retrived.
///
/// \param completion The block to execute after users in a group success or failure.
- (void)getUsersInGroup:(LavaGroup * _Nonnull)group completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;

/// Request to add one or more users to a group.
///
/// \param users The list of users that needs to be added to the group.
///
/// \param completion The block to execute after user subscription success or failure.
- (void)addUsers:(NSArray<LavaChatUser *> * _Nonnull)users toGroup:(LavaGroup * _Nonnull)group completion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Request to leave a group.
///
/// \param group The group that needs to be unsubscribed.
///
/// \param completion The block to execute after group unsubscription success or failure.
- (void)leaveGroup:(LavaGroup * _Nonnull)group completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LavaMessenger (SWIFT_EXTENSION(LavaSDK))

/// Returns the chat recipient list.
///
/// \returns  The chat recipient list.
- (NSArray<LavaChatUser *> * _Nonnull)chatRecipients;
@end



/// Lava Messenger delegate callbacks.
SWIFT_PROTOCOL("_TtP7LavaSDK21LavaMessengerDelegate_")
@protocol LavaMessengerDelegate
@optional

/// Gets called when messenger gets connected.
- (void)lavaMessengerDidConnect;

/// Gets called when messenger connection is failed.
- (void)lavaMessengerConnectionError:(NSError * _Nonnull)error;

/// Gets called when a new message is received from a user.
- (void)didReceiveMessage:(LavaMessage * _Nonnull)message from:(LavaChatUser * _Nonnull)user;

/// Gets called when a new message is received from a user in a group.
- (void)didReceiveMessage:(LavaMessage * _Nonnull)message from:(LavaChatUser * _Nonnull)user group:(LavaGroup * _Nonnull)group;

/// Gets called when chat state changed for an user.
- (void)didChatStateChangedForUser:(LavaChatUser * _Nonnull)user chatState:(enum LavaChatState)chatState;

/// Gets called when the user adds another user to his buddy list or when user being added to another user's buddy list. We need to update the conversation list when this happens.
- (void)rosterContentChanged;

/// Gets called when user is added to a group. We need to update the conversation list when this happens.
- (void)didAddedToGroup:(LavaGroup * _Nonnull)group;
@end


@class CLBeaconRegion;
@class CLCircularRegion;
@class CLBeacon;


/// The protocol that defines callbacks from beacon and circular region.
SWIFT_PROTOCOL("_TtP7LavaSDK25LavaRegionManagerDelegate_")
@protocol LavaRegionManagerDelegate <NSObject>

/// This gets called when a beacon enter event occurs.
- (void)didEnterBeaconRegion:(CLBeaconRegion * _Nonnull)region;

/// This gets called when a beacon exit event occurs.
- (void)didExitBeaconRegion:(CLBeaconRegion * _Nonnull)region;

/// This gets called when a circular region enter event occurs.
- (void)didEnterCircularRegion:(CLCircularRegion * _Nonnull)region;

/// This gets called when a circular region exit event occurs.
- (void)didExitCircularRegion:(CLCircularRegion * _Nonnull)region;

/// This gets called when user is within the beacon region.
- (void)didRangeBeacon:(CLBeacon * _Nonnull)beacon;
@end


SWIFT_CLASS("_TtC7LavaSDK10LavaServer")
@interface LavaServer : NSObject
@property (nonatomic, copy) NSString * _Null_unspecified title;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LavaServer (SWIFT_EXTENSION(LavaSDK))
+ (LavaServer * _Nonnull)currentServer;
+ (LavaServer * _Nonnull)client;
+ (LavaServer * _Nonnull)production;
+ (LavaServer * _Nonnull)development;
+ (LavaServer * _Nonnull)testing;
@end


SWIFT_CLASS("_TtC7LavaSDK11LavaTracker")
@interface LavaTracker : NSObject
- (void)trackScreen:(NSString * _Nonnull)screenName;
- (void)trackEvent:(NSString * _Nonnull)category action:(NSString * _Nonnull)action;
@end

@class LavaUserAccount;


/// The user object. This class holds user's profile and accounts.
SWIFT_CLASS("_TtC7LavaSDK8LavaUser")
@interface LavaUser : LavaModel <NSCoding>

/// The list of accounts this user holds. This can be Email, Phone number or Facebook account.
@property (nonatomic, readonly, copy) NSArray<LavaUserAccount *> * _Nullable accounts;

/// The profile of the user.
@property (nonatomic, readonly, strong) LavaUserProfile * _Nullable userProfile;

/// The jabber id of the user which is used to connect to chat server. This can be nil if chat functionality is not applicable for this account.
@property (nonatomic, readonly, copy) NSString * _Nullable jabberId;

/// The jabber id of the user without domain which is used to connect to chat server. This can be nil if chat functionality is not applicable for this account.
@property (nonatomic, readonly, copy) NSString * _Nullable jabberIdWithoutDomain;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end



/// Defines a account of the user. This can be a Email, Phone number or Facebook account.
SWIFT_CLASS("_TtC7LavaSDK15LavaUserAccount")
@interface LavaUserAccount : LavaModel <NSCoding>

/// Represents the email or mobile number or facebook id that user used to logged in.
@property (nonatomic, readonly, copy) NSString * _Nullable externalId;

/// Represents the login type.
@property (nonatomic, readonly, copy) NSString * _Nullable externalSystem;

/// Variable used to check the verification status of external id.
@property (nonatomic, readonly) BOOL isVerified;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end



@interface NSError (SWIFT_EXTENSION(LavaSDK))
@end


@interface UIImageView (SWIFT_EXTENSION(LavaSDK))
@end

@class NSURL;

@interface UIImageView (SWIFT_EXTENSION(LavaSDK))

/// Use this method to download all secured lava images. This method internally uses AlamofireImage to download the image.
///
/// \param url The URL for the image.
- (void)lava_setImageWithURL:(NSURL * _Nonnull)url;

/// Use this method to download all secured lava images. This method internally uses AlamofireImage to download the image.
///
/// \param url The URL for the image.
///
/// \param placeholderImage The image to be set initially until the image request finished.
- (void)lava_setImageWithURL:(NSURL * _Nonnull)url placeholderImage:(UIImage * _Nonnull)placeholderImage;

/// Use this method to download all secured lava images and rounds the corners of an image into a circle. This method internally uses AlamofireImage to download the image.
///
/// \param url The URL for the image.
- (void)lava_setCircleImageWithURL:(NSURL * _Nonnull)url;

/// Cancels the active download request.
- (void)lava_cancelImageRequest;
@end


@interface XMPPIQ (SWIFT_EXTENSION(LavaSDK))
@end


@interface XMPPPubSub (SWIFT_EXTENSION(LavaSDK))
@end

#pragma clang diagnostic pop
